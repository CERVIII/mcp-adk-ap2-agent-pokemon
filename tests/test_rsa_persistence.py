#!/usr/bin/env python3
"""
Test de persistencia de claves RSA del MCP Server

Este test verifica que:
1. Las claves se generan correctamente la primera vez
2. Las claves se cargan desde disco en ejecuciones posteriores
3. Las claves permanecen consistentes entre reinicios
"""

import subprocess
import time
import os
import re
from pathlib import Path

# Paths
PROJECT_ROOT = Path(__file__).parent.parent
MCP_SERVER_DIR = PROJECT_ROOT / "mcp-server"
KEYS_DIR = MCP_SERVER_DIR / "keys"
PRIVATE_KEY_PATH = KEYS_DIR / "merchant_private.pem"
PUBLIC_KEY_PATH = KEYS_DIR / "merchant_public.pem"

def run_mcp_server_briefly(timeout_seconds=2):
    """
    Inicia el MCP server brevemente y captura su output.
    """
    try:
        result = subprocess.run(
            ["npm", "start"],
            cwd=MCP_SERVER_DIR,
            capture_output=True,
            text=True,
            timeout=timeout_seconds
        )
        return result.stdout + result.stderr
    except subprocess.TimeoutExpired as e:
        # Timeout es esperado
        stdout = e.stdout.decode('utf-8') if isinstance(e.stdout, bytes) else (e.stdout or "")
        stderr = e.stderr.decode('utf-8') if isinstance(e.stderr, bytes) else (e.stderr or "")
        return stdout + stderr

def extract_public_key_preview(output):
    """
    Extrae el preview de la clave p√∫blica del output del servidor.
    """
    match = re.search(r'Public key preview: (.+)', output)
    if match:
        return match.group(1).strip()
    return None

def test_rsa_key_persistence():
    """
    Test principal de persistencia de claves RSA.
    """
    print("üß™ Testing RSA Key Persistence")
    print("=" * 60)
    
    # Test 1: Limpiar claves existentes
    print("\n1Ô∏è‚É£ Test: Limpiando claves existentes...")
    if PRIVATE_KEY_PATH.exists():
        PRIVATE_KEY_PATH.unlink()
        print("   ‚úì Eliminada clave privada")
    if PUBLIC_KEY_PATH.exists():
        PUBLIC_KEY_PATH.unlink()
        print("   ‚úì Eliminada clave p√∫blica")
    
    assert not PRIVATE_KEY_PATH.exists(), "‚ùå Clave privada no se elimin√≥"
    assert not PUBLIC_KEY_PATH.exists(), "‚ùå Clave p√∫blica no se elimin√≥"
    print("   ‚úÖ Claves eliminadas correctamente")
    
    # Test 2: Primera ejecuci√≥n - generar claves
    print("\n2Ô∏è‚É£ Test: Primera ejecuci√≥n (generar claves)...")
    output1 = run_mcp_server_briefly(timeout_seconds=3)
    
    # Verificar que dice "Generating"
    assert "Generating new RSA key pair" in output1, \
        "‚ùå No se generaron nuevas claves en primera ejecuci√≥n"
    print("   ‚úì Mensaje de generaci√≥n encontrado")
    
    # Verificar que se guardaron
    assert "RSA keys saved to disk" in output1, \
        "‚ùå Las claves no se guardaron en disco"
    print("   ‚úì Mensaje de guardado encontrado")
    
    # Verificar que los archivos existen
    time.sleep(0.5)  # Dar tiempo para que se escriban
    assert PRIVATE_KEY_PATH.exists(), "‚ùå Clave privada no se cre√≥"
    assert PUBLIC_KEY_PATH.exists(), "‚ùå Clave p√∫blica no se cre√≥"
    print("   ‚úì Archivos de claves creados")
    
    # Verificar permisos
    private_perms = oct(PRIVATE_KEY_PATH.stat().st_mode)[-3:]
    public_perms = oct(PUBLIC_KEY_PATH.stat().st_mode)[-3:]
    assert private_perms == "600", f"‚ùå Permisos incorrectos en clave privada: {private_perms}"
    assert public_perms == "644", f"‚ùå Permisos incorrectos en clave p√∫blica: {public_perms}"
    print(f"   ‚úì Permisos correctos (privada: {private_perms}, p√∫blica: {public_perms})")
    
    # Extraer preview de clave p√∫blica
    public_key_preview_1 = extract_public_key_preview(output1)
    assert public_key_preview_1, "‚ùå No se pudo extraer preview de clave p√∫blica"
    print(f"   ‚úì Preview de clave: {public_key_preview_1[:50]}...")
    
    # Leer contenido de las claves
    private_key_content_1 = PRIVATE_KEY_PATH.read_text()
    public_key_content_1 = PUBLIC_KEY_PATH.read_text()
    
    assert "BEGIN PRIVATE KEY" in private_key_content_1, "‚ùå Formato de clave privada inv√°lido"
    assert "BEGIN PUBLIC KEY" in public_key_content_1, "‚ùå Formato de clave p√∫blica inv√°lido"
    print("   ‚úì Formato PEM correcto")
    
    print("   ‚úÖ Primera ejecuci√≥n completada correctamente")
    
    # Test 3: Segunda ejecuci√≥n - cargar claves existentes
    print("\n3Ô∏è‚É£ Test: Segunda ejecuci√≥n (cargar claves)...")
    time.sleep(1)  # Esperar un poco antes de la segunda ejecuci√≥n
    output2 = run_mcp_server_briefly(timeout_seconds=3)
    
    # Verificar que dice "Loading"
    assert "Loading existing RSA keys from disk" in output2, \
        "‚ùå No se cargaron claves existentes en segunda ejecuci√≥n"
    print("   ‚úì Mensaje de carga encontrado")
    
    assert "RSA keys loaded successfully" in output2, \
        "‚ùå Las claves no se cargaron exitosamente"
    print("   ‚úì Mensaje de √©xito encontrado")
    
    # Verificar que NO dice "Generating"
    assert "Generating new RSA key pair" not in output2, \
        "‚ùå Se generaron nuevas claves en lugar de cargar existentes"
    print("   ‚úì No se generaron nuevas claves")
    
    # Extraer preview de clave p√∫blica
    public_key_preview_2 = extract_public_key_preview(output2)
    assert public_key_preview_2, "‚ùå No se pudo extraer preview de clave p√∫blica"
    
    # Verificar que el preview es el mismo
    assert public_key_preview_1 == public_key_preview_2, \
        f"‚ùå Las claves son diferentes:\n  Primera: {public_key_preview_1}\n  Segunda: {public_key_preview_2}"
    print(f"   ‚úì Preview de clave id√©ntico: {public_key_preview_2[:50]}...")
    
    # Leer contenido de las claves nuevamente
    private_key_content_2 = PRIVATE_KEY_PATH.read_text()
    public_key_content_2 = PUBLIC_KEY_PATH.read_text()
    
    # Verificar que el contenido es id√©ntico
    assert private_key_content_1 == private_key_content_2, \
        "‚ùå El contenido de la clave privada cambi√≥"
    assert public_key_content_1 == public_key_content_2, \
        "‚ùå El contenido de la clave p√∫blica cambi√≥"
    print("   ‚úì Contenido de claves id√©ntico")
    
    print("   ‚úÖ Segunda ejecuci√≥n completada correctamente")
    
    # Test 4: Verificar que son un par v√°lido
    print("\n4Ô∏è‚É£ Test: Verificando que son un par RSA v√°lido...")
    try:
        # Extraer m√≥dulo de clave privada
        result_private = subprocess.run(
            ["openssl", "rsa", "-in", str(PRIVATE_KEY_PATH), "-noout", "-modulus"],
            capture_output=True,
            text=True,
            check=True
        )
        modulus_private = result_private.stdout.strip()
        
        # Extraer m√≥dulo de clave p√∫blica
        result_public = subprocess.run(
            ["openssl", "rsa", "-pubin", "-in", str(PUBLIC_KEY_PATH), "-noout", "-modulus"],
            capture_output=True,
            text=True,
            check=True
        )
        modulus_public = result_public.stdout.strip()
        
        # Comparar m√≥dulos
        assert modulus_private == modulus_public, \
            "‚ùå Las claves no forman un par v√°lido (m√≥dulos diferentes)"
        print("   ‚úì Los m√≥dulos coinciden")
        print("   ‚úÖ Par de claves RSA v√°lido")
    except FileNotFoundError:
        print("   ‚ö†Ô∏è  OpenSSL no disponible, saltando validaci√≥n de par")
    except subprocess.CalledProcessError as e:
        print(f"   ‚ö†Ô∏è  Error al verificar par: {e}")
    
    # Test 5: Verificar tama√±o de clave
    print("\n5Ô∏è‚É£ Test: Verificando tama√±o de clave RSA...")
    try:
        result = subprocess.run(
            ["openssl", "rsa", "-pubin", "-in", str(PUBLIC_KEY_PATH), "-text", "-noout"],
            capture_output=True,
            text=True,
            check=True
        )
        output = result.stdout
        
        # Buscar "Public-Key: (2048 bit)"
        if "2048 bit" in output:
            print("   ‚úì Clave RSA de 2048 bits (correcto)")
        else:
            print(f"   ‚ö†Ô∏è  Tama√±o de clave no confirmado: {output[:100]}")
        
        print("   ‚úÖ Tama√±o de clave verificado")
    except (FileNotFoundError, subprocess.CalledProcessError):
        print("   ‚ö†Ô∏è  No se pudo verificar tama√±o de clave")
    
    # Summary
    print("\n" + "=" * 60)
    print("‚úÖ TODOS LOS TESTS PASARON")
    print("=" * 60)
    print("\nüìä Resumen:")
    print(f"   ‚Ä¢ Claves generadas en primera ejecuci√≥n")
    print(f"   ‚Ä¢ Claves cargadas en segunda ejecuci√≥n")
    print(f"   ‚Ä¢ Claves persistentes entre reinicios")
    print(f"   ‚Ä¢ Formato PEM v√°lido")
    print(f"   ‚Ä¢ Permisos correctos (600/644)")
    print(f"   ‚Ä¢ Par RSA v√°lido (2048 bits)")
    print(f"\nüìÅ Ubicaci√≥n de claves:")
    print(f"   ‚Ä¢ Privada: {PRIVATE_KEY_PATH}")
    print(f"   ‚Ä¢ P√∫blica:  {PUBLIC_KEY_PATH}")

if __name__ == "__main__":
    try:
        test_rsa_key_persistence()
    except AssertionError as e:
        print(f"\n‚ùå TEST FAILED: {e}")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
